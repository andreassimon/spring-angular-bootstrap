buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11"
        classpath "gradle.plugin.com.github.jk1:gradle-license-report:0.3.5"
    }
}

plugins {
    id "org.springframework.boot" version "1.4.2.RELEASE"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.github.jk1.dependency-license-report'


jar {
	baseName = 'bootstrap'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')

	runtime('org.springframework.boot:spring-boot-devtools')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

ext {
    allowedLicenses = [
        'Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0, http://www.opensource.org/licenses/Apache-2.0)',
        'Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)',
        'bsd 2 clause or mit or apache 2.0',
        'bsd 3 clause and mit',
        'BSD (http://github.com/facebook/esprima/raw/master/LICENSE.BSD)',
        'BSD (http://opensource.org/licenses/BSD-3-Clause)',
        'BSD 2-clause "Simplified" License (http://www.opensource.org/licenses/BSD-2-Clause)',
        'BSD 3-clause "New" or "Revised" License (http://www.opensource.org/licenses/BSD-3-Clause)',
        'Do What The F*ck You Want To Public License (http://sam.zoy.org/wtfpl/COPYING)',
        'ISC License (http://www.isc.org/software/license, http://www.opensource.org/licenses/ISC)',
        'MIT (http  : //www.opensource.org/licenses/MIT)',
        'MIT (http://github.com/isaacs/minimatch/raw/master/LICENSE)',
        'MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)',
        'MIT (http://github.com/jprichardson/node-fs-extra/raw/master/LICENSE)',
        'MIT (http://lp.mit-license.org/)',
        'MIT (http://opensource.org/licenses/MIT)',
        'MIT (http://www.opensource.org/licenses/mit-license.php)',
        'MIT (https://github.com/3rd-Eden/useragent/blob/master/LICENSE)',
        'MIT (https://github.com/cowboy/node-exit/blob/master/LICENSE-MIT)',
        'MIT (https://github.com/isaacs/nopt/raw/master/LICENSE)',
        'MIT (https://github.com/jonschlinkert/braces/blob/master/LICENSE-MIT)',
        'MIT (https://github.com/jonschlinkert/expand-range/blob/master/LICENSE-MIT)',
        'MIT (https://github.com/jonschlinkert/is-number/blob/master/LICENSE-MIT)',
        'MIT (https://github.com/jonschlinkert/repeat-string/blob/master/LICENSE-MIT)',
        'MIT (https://github.com/mklabs/node-fileset/blob/master/LICENSE-MIT)',
        'MIT (https://github.com/shinnn/inline-source-map-comment/blob/master/LICENSE)',
        'MIT (https://github.com/trentmillar/md5-o-matic/blob/master/LICENSE)',
        'MIT (https://raw.github.com/cthackers/adm-zip/master/MIT-LICENSE.txt)',
        'MIT (https://raw.githubusercontent.com/unclechu/node-deep-extend/master/LICENSE), MIT License (http://www.opensource.org/licenses/MIT)',
        'MIT License (http://www.opensource.org/licenses/MIT)',
        'unknown (http://github.com/rbuckton/ReflectDecorators/raw/master/LICENSE), Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0, http://www.opensource.org/licenses/Apache-2.0)',
        'zlib License (http://www.zlib.net/zlib_license.html, http://www.opensource.org/licenses/Zlib)',
    ]
    licenseReportFileName = "$projectDir/src/docs/asciidoc/third-party-libraries.adoc"
}

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    // outputDir = "$projectDir/build/licenses"

    // List the groups ids to exclude from dependency report.
    // By default project's own group is excluded.
    // For finer granularity, see: excludes.
    // excludeGroups = ['do.not.want']

    // List the ids (in module:name format) to exclude from dependency report.
    // By default excludes is empty.
    // excludes = ['moduleGroup:moduleName']

    // Set custom report renderer, implementing ReportRenderer.
    renderer = new de.quagilis.license.render.AsciidocReportRenderer(licenseReportFileName, 'Third-party libraries')

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
    // importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // Adjust the configurations to use, e.g. for Android projects.
    // configurations = ['compile']
}

task frontendLicenses(group: 'Documentation') << {
    File frontendLicensesFile = new File("src/docs/asciidoc/frontend-licenses.adoc")
    frontendLicensesFile.text = ""
    frontendLicensesFile << """\
== Frontend Third-party libraries

=== Zugelassene Lizenzen:

${allowedLicenses.collect { " * $it" }.join("\n")}

=== Verwendete Bibliotheken

[cols="5,2,4",options="header"]
|===
| Name | Version | Lizenz
"""
    new File("angular/licenses.tsv").eachLine { line ->
        //noinspection UnnecessaryQualifiedReference
        java.util.Optional<de.quagilis.license.Library> optionalLibrary = de.quagilis.license.DependencyParser.fromNpmLine(line)
        optionalLibrary.orElseThrow({ new RuntimeException("Cannot match '$line'") })
        optionalLibrary.ifPresent({ de.quagilis.license.Library library ->
            if(!allowedLicenses.contains(library.licenses[0].name)) {
                logger.warn "'${library.name}' uses forbidden license '${library.licenses[0].name}'"
            }
            frontendLicensesFile << "| ${library.name} | ${library.version} | ${library.licenses[0].name}(${library.licenses[0].links[0]}) \n"
        })
    }

    frontendLicensesFile << "|==="
}

asciidoctor {
    group 'Documentation'
    dependsOn generateLicenseReport, frontendLicenses
    inputs.file licenseReportFileName

    // The backends to use. Use backends to append. Use setBackends or backends=[] to overwrite Type: Set<String>, but
    // any type can be converted to String can be used. Default: [html5].
    backends 'pdf'
    sources {
        include 'administrationshandbuch.adoc'
    }
    attributes = [
        doctype:     'book',
        toc:         'left',
        toclevels:   '2',
        numbered:    '',
        sectlinks:   '',
        sectanchors: ''
    ]
}
