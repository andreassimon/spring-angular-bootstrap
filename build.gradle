buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11"
    }
}

plugins {
    id "org.springframework.boot" version "1.4.2.RELEASE"
    id "org.nosphere.apache.rat" version "0.2.2"
    id "com.github.jk1.dependency-license-report" version "0.3.4"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.convert'

jar {
	baseName = 'bootstrap'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')

	runtime('org.springframework.boot:spring-boot-devtools')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    // outputDir = "$projectDir/build/licenses"

    // List the groups ids to exclude from dependency report.
    // By default project's own group is excluded.
    // For finer granularity, see: excludes.
    // excludeGroups = ['do.not.want']

    // List the ids (in module:name format) to exclude from dependency report.
    // By default excludes is empty.
    // excludes = ['moduleGroup:moduleName']

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    // renderer = new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries')

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
    // importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // Adjust the configurations to use, e.g. for Android projects.
    // configurations = ['compile']
}

asciidoctor {
    group 'Documentation'
    dependsOn generateLicenseReport

    // The backends to use. Use backends to append. Use setBackends or backends=[] to overwrite Type: Set<String>, but
    // any type can be converted to String can be used. Default: [html5].
    backends 'pdf'
    sources {
        include 'administrationshandbuch.adoc'
    }
    attributes = [
        doctype:     'book',
        toc:         'left',
        toclevels:   '2',
        numbered:    '',
        sectlinks:   '',
        sectanchors: ''
    ]
}
