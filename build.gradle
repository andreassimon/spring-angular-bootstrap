buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11"
        classpath "gradle.plugin.com.github.jk1:gradle-license-report:0.3.5"
    }
}

plugins {
    id "org.springframework.boot" version "1.4.2.RELEASE"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.github.jk1.dependency-license-report'


jar {
	baseName = 'bootstrap'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')

	runtime('org.springframework.boot:spring-boot-devtools')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

ext {
    licenseReportFileName = "$projectDir/src/docs/asciidoc/third-party-libraries.adoc"
}

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    // outputDir = "$projectDir/build/licenses"

    // List the groups ids to exclude from dependency report.
    // By default project's own group is excluded.
    // For finer granularity, see: excludes.
    // excludeGroups = ['do.not.want']

    // List the ids (in module:name format) to exclude from dependency report.
    // By default excludes is empty.
    // excludes = ['moduleGroup:moduleName']

    // Set custom report renderer, implementing ReportRenderer.
    renderer = new de.quagilis.license.render.AsciidocReportRenderer(licenseReportFileName, 'Third-party libraries')

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
    // importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // Adjust the configurations to use, e.g. for Android projects.
    // configurations = ['compile']
}

task frontendLicenses(group: 'Documentation') << {
    File frontendLicensesFile = new File("src/docs/asciidoc/frontend-licenses.adoc")
    frontendLicensesFile.text = ""
    frontendLicensesFile << """\
== Frontend Third-party libraries

[cols="5,2,4",options="header"]
|===
| Name | Version | Lizenz
"""
    java.util.regex.Pattern regEx = ~/([^\t]*) \(([^\)]*)\)\t([^\t]*).*/
    def reflectLine = "reflect-metadata (0.1.9)	unknown (http://github.com/rbuckton/ReflectDecorators/raw/master/LICENSE), Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0, http://www.opensource.org/licenses/Apache-2.0)"
    def angularLine = "@angular/common (2.2.1)	MIT License (http://www.opensource.org/licenses/MIT)	node_modules/@angular/common/package.json"
    assert (reflectLine =~ regEx).matches()
    assert (reflectLine =~ regEx)[0][1..3] == ['reflect-metadata', '0.1.9', 'unknown (http://github.com/rbuckton/ReflectDecorators/raw/master/LICENSE), Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0, http://www.opensource.org/licenses/Apache-2.0)' ]
    assert (angularLine =~ regEx).matches()
    assert (angularLine =~ regEx)[0][1..3] == ['@angular/common', '2.2.1', 'MIT License (http://www.opensource.org/licenses/MIT)']

    new File("angular/licenses.tsv").eachLine { line ->
        def matcher = (line =~ regEx)
        if(!matcher.matches()) {
            throw new RuntimeException("Cannot match '$line'")
        }
        def packageName = matcher[0][1]
        def packageVersion = matcher[0][2]
        def packageLicense = matcher[0][3]

        frontendLicensesFile << "| $packageName | $packageVersion | $packageLicense \n"
    }

    frontendLicensesFile << "|==="
}

asciidoctor {
    group 'Documentation'
    dependsOn generateLicenseReport, frontendLicenses
    inputs.file licenseReportFileName

    // The backends to use. Use backends to append. Use setBackends or backends=[] to overwrite Type: Set<String>, but
    // any type can be converted to String can be used. Default: [html5].
    backends 'pdf'
    sources {
        include 'administrationshandbuch.adoc'
    }
    attributes = [
        doctype:     'book',
        toc:         'left',
        toclevels:   '2',
        numbered:    '',
        sectlinks:   '',
        sectanchors: ''
    ]
}
