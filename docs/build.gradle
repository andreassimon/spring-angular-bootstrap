import de.quagilis.license.License

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11"
    }
}

apply plugin: 'org.asciidoctor.convert'

ext {
    allowedLicenses = [
        ([matchLicense: 'Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0, http://www.opensource.org/licenses/Apache-2.0)']): License.Apache2(),
        ([matchLicense: 'Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)']): License.Apache2(),
        ([matchLicense: 'http://www.apache.org/licenses/LICENSE-2.0.txt[The Apache Software License, Version 2.0]']): License.Apache2(),
        ([matchLicense: 'http://www.apache.org/licenses/LICENSE-2.0.txt[Apache Software Licenses]']): License.Apache2(),
        ([matchLicense: 'http://www.apache.org/licenses/LICENSE-2.0.txt[Apache License, Version 2.0]']): License.Apache2(),
        ([matchLicense: 'http://www.apache.org/licenses/LICENSE-2.0[Apache License, Version 2.0]']): License.Apache2(),
        ([matchLicense: 'bsd 2 clause or mit or apache 2.0']): License.BSD2(),
        ([matchLicense: 'bsd 3 clause and mit']): License.MIT(),
        ([matchLicense: 'BSD (http://github.com/facebook/esprima/raw/master/LICENSE.BSD)']): License.BSD2(),
        ([matchLicense: 'BSD (http://opensource.org/licenses/BSD-3-Clause)']): License.BSD3(),
        ([matchLicense: 'BSD 2-clause "Simplified" License (http://www.opensource.org/licenses/BSD-2-Clause)']): License.BSD2(),
        ([matchLicense: 'BSD 3-clause "New" or "Revised" License (http://www.opensource.org/licenses/BSD-3-Clause)']): License.BSD3(),
        ([matchLicense: 'Creative Commons Attribution 4.0 (http://creativecommons.org/licenses/by/4.0/legalcode)']): License.CC_4_0(),
        ([matchLicense: 'Do What The F*ck You Want To Public License (http://sam.zoy.org/wtfpl/COPYING)']): License.doWhatTheFuckYouWantPublicLicense(),
        ([matchLicense: 'ISC License (http://www.isc.org/software/license, http://www.opensource.org/licenses/ISC)']): License.ISC(),
        ([matchLicense: 'http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html[GNU Lesser General Public License]']): License.LGPL2_1(),
        ([matchLicense: 'http://www.opensource.org/licenses/mit-license.php[MIT License]']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/array-slice/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/arr-flatten/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http  : //www.opensource.org/licenses/MIT)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/isaacs/minimatch/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/jprichardson/node-fs-extra/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://lp.mit-license.org/)']): License.MIT(),
        ([matchLicense: 'MIT (http://opensource.org/licenses/MIT)']): License.MIT(),
        ([matchLicense: 'MIT (http://www.opensource.org/licenses/mit-license.php)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/3rd-Eden/useragent/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/cowboy/node-exit/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/isaacs/nopt/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/braces/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/expand-range/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/is-number/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/repeat-string/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/mklabs/node-fileset/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/shinnn/inline-source-map-comment/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/trentmillar/md5-o-matic/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://raw.github.com/cthackers/adm-zip/master/MIT-LICENSE.txt)']): License.MIT(),
        ([matchLicense: 'MIT (https://raw.githubusercontent.com/unclechu/node-deep-extend/master/LICENSE), MIT License (http://www.opensource.org/licenses/MIT)']): License.MIT(),
        ([matchLicense: 'MIT License (http://www.opensource.org/licenses/MIT)']): License.MIT(),
        ([matchLicense: 'http://repository.jboss.org/licenses/cc0-1.0.txt[Public Domain]']): License.CC0(),
        ([matchLicense: 'unknown (http://github.com/rbuckton/ReflectDecorators/raw/master/LICENSE), Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0, http://www.opensource.org/licenses/Apache-2.0)']): License.Apache2(),
        ([matchLicense: 'zlib License (http://www.zlib.net/zlib_license.html, http://www.opensource.org/licenses/Zlib)']): License.Zlib(),
        ([matchLicense: 'MIT (http://creativecommons.org/licenses/MIT/)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/Colingo/date-now/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/Raynos/console-browserify/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/Raynos/function-bind/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/Raynos/to-array/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/aslakhellesoy/eventsource-node/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/fb55/htmlparser2/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://github.com/kriskowal/q/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (http://kit.mit-license.org/)']): License.MIT(),
        ([matchLicense: 'MIT (http://mths.be/mit)']): License.MIT(),
        ([matchLicense: 'MIT (http://www.opensource.org/licenses/MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/Gozala/enchain/License.md)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/caolan/async/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/cowboy/node-findup-sync/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/isaacs/rimraf/raw/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jefflembeck/img-stats/blob/master/LICENSE-MIT), MIT License (http://www.opensource.org/licenses/MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/array-unique/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/glob-base/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/is-primitive/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/longest/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/preserve/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/repeat-element/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jonschlinkert/window-size/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/jryans/timers-browserify/blob/master/LICENSE.md)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/niklasvh/base64-arraybuffer/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/regexps/filename-regex/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/tarruda/has/blob/master/LICENSE-MIT)']): License.MIT(),
        ([matchLicense: 'MIT (https://github.com/thlorenz/deep-is/blob/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://raw.github.com/broofa/node-mime/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'MIT (https://raw.github.com/gkz/prelude-ls/master/LICENSE)']): License.MIT(),
        ([matchLicense: 'wtfpl or mit']): License.MIT(),
//        'AFLv2.1 (http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L43), BSD (http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L13)'
        ([matchLicense: 'BSD (http://github.com/estools/estraverse/raw/master/LICENSE.BSD)']): License.BSD2(),
        ([matchLicense: 'BSD (http://github.com/estools/esutils/raw/master/LICENSE.BSD)']): License.BSD2(),
        ([matchLicense: 'BSD (http://github.com/hueniverse/sntp/raw/master/LICENSE)']): License.BSD3(),
//        'BSD (https://github.com/jrburke/r.js/blob/master/LICENSE), MIT (https://github.com/jrburke/r.js/blob/master/LICENSE)'
        ([matchLicense: 'LGPL (http://www.gnu.org/licenses/lgpl.html)']): License.LGPL3_0(),
        ([matchLicense: 'MISSING']): License.MISSING(),
        ([matchLibrary: 'css-select']): License.BSD3(),
//        'The Unlicense (http://unlicense.org/)'
//        'public domain'
//        'unknown (http://github.com/rbuckton/reflect-metadata/raw/master/LICENSE), Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0, http://www.opensource.org/licenses/Apache-2.0)'
//        'unmatched: node_modules/dom-serializer/node_modules/domelementtype/LICENSE'
//        'unmatched: node_modules/domelementtype/LICENSE'
//        'unmatched: node_modules/domhandler/LICENSE'
//        'unmatched: node_modules/domutils/LICENSE'
//        'unmatched: node_modules/htmlparser2/node_modules/domutils/LICENSE'
    ]
}

task allowedLicensesAsciidoc(group: 'Documentation') {
    doLast {
      new File("$projectDir/src/docs/asciidoc/allowed-licenses.adoc").text =
          ((Map<String, License>) allowedLicenses).values().toSet() \
              .sort { License a, License b -> a.name.compareTo(b.name) } \
              .collect { " * $it.reference\n" } \
              .join()
    }
}

task backendLicenses(type: de.quagilis.license.ProcessLicensesTask) {
    dependsOn ':backend:generateLicenseReport'

    input rootProject.file("backend/build/licenses.tsv")
    output file("src/docs/asciidoc/backend-licenses.adoc")
    allowedLicenses project.allowedLicenses
}

task frontendLicenses(type: de.quagilis.license.ProcessLicensesTask) {
    input rootProject.file("frontend/licenses.tsv")
    output file("src/docs/asciidoc/frontend-licenses.adoc")
    allowedLicenses project.allowedLicenses
}

task licenseTexts {
    doLast {
        def licenseDocuments = [
            [ reference: 'apache-2.0', licenseText: file('src/docs/asciidoc/apache-2.0.adoc').text ]
          , [ reference: 'bsd-2-clause', licenseText: file('src/docs/asciidoc/bsd-2-clause.adoc').text ]
          , [ reference: 'bsd-3-clause', licenseText: file('src/docs/asciidoc/bsd-3-clause.adoc').text ]
          , [ reference: 'CC0-1.0-license', licenseText: file('src/docs/asciidoc/cc0-1.0.adoc').text ]
          , [ reference: 'CC-Attribution-4.0-license', licenseText: file('src/docs/asciidoc/cc-4.0.adoc').text ]
          , [ reference: 'do-what-the-fuck-you-want-license', licenseText: file('src/docs/asciidoc/do-what-the-fuck-you-want-license.adoc').text ]
          , [ reference: 'isc', licenseText: file('src/docs/asciidoc/isc.adoc').text ]
          , [ reference: 'lgpl-2.1-license', licenseText: file('src/docs/asciidoc/lgpl-2.1.adoc').text ]
          , [ reference: 'lgpl-3.0-license', licenseText: file('src/docs/asciidoc/lgpl-3.0.adoc').text ]
          , [ reference: 'mit', licenseText: file('src/docs/asciidoc/mit.adoc').text ]
          , [ reference: 'zlib', licenseText: file('src/docs/asciidoc/zlib.adoc').text ]
        ]
        file('src/docs/asciidoc/license-texts.adoc').text = """\
:leveloffset: +2
${ licenseDocuments.collect { license ->
"""[[${license.reference}]]
${license.licenseText}"""
}.join('\n') }
:leveloffset: -2
"""
    }
}

asciidoctor {
    group 'Documentation'
    dependsOn allowedLicensesAsciidoc
    dependsOn backendLicenses
    dependsOn frontendLicenses
    dependsOn licenseTexts

    // The backends to use. Use backends to append. Use setBackends or backends=[] to overwrite Type: Set<String>, but
    // any type can be converted to String can be used. Default: [html5].
    backends 'pdf'
    sources {
        include 'administrationshandbuch.adoc'
    }
    attributes = [
        doctype:     'book',
        toc:         'left',
        toclevels:   '2',
        numbered:    '',
        sectlinks:   '',
        sectanchors: ''
    ]
}
